using HW1.Api.Domain.Contracts.Services;
using HW1.Api.Domain.Contracts.Telegram;
using HW1.Api.Domain.Models;
using Telegram.Bot.Types;

namespace HW1.Api.WebAPI.TelegramBot.Commands;

public class StatsCommandHandler : BaseCommandHandler
{
    private readonly IUserAnalyticsService _analyticsService;

    public override string Command => "/stats";
    public override string Description => "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã";

    public StatsCommandHandler(
        ITelegramBotService botService,
        IUserService userService,
        ITelegramUserService telegramUserService,
        IUserAnalyticsService analyticsService)
        : base(botService, userService, telegramUserService)
    {
        _analyticsService = analyticsService;
    }

    public override async Task HandleAsync(Message message, CancellationToken cancellationToken)
    {
        if (!await ValidateUserAccessAsync(message.From.Id, cancellationToken))
        {
            await _botService.SendMessageAsync(
                message.Chat.Id,
                "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /start",
                cancellationToken);
            return;
        }

        try
        {
            var stats = await GetSystemStatsAsync();
            await _botService.SendMessageAsync(message.Chat.Id, stats, cancellationToken);
        }
        catch (Exception ex)
        {
            await _botService.SendMessageAsync(
                message.Chat.Id,
                "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
                cancellationToken);
        }
    }

    private async Task<string> GetSystemStatsAsync()
    {
        var totalUsers = await _userService.GetTotalUsersCountAsync();
        var genderStats = await _analyticsService.GetUsersCountByGenderAsync();
        var earliestDate = await _analyticsService.GetEarliestRegistrationDateAsync();
        var latestDate = await _analyticsService.GetLatestRegistrationDateAsync();
        var telegramUsersCount = await _telegramUserService.GetActiveUsersCountAsync();

        var statsMessage = 
@$"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã</b>

<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–∏—Å—Ç–µ–º—ã:</b> {totalUsers}
<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–æ—Ç–∞:</b> {telegramUsersCount}

<b>–ü–æ –ø–æ–ª—É:</b>
    üë® –ú—É–∂—á–∏–Ω—ã: {genderStats.GetValueOrDefault(Gender.Male, 0)}
    üë© –ñ–µ–Ω—â–∏–Ω—ã: {genderStats.GetValueOrDefault(Gender.Female, 0)}
    ‚ùì –ù–µ —É–∫–∞–∑–∞–Ω: {genderStats.GetValueOrDefault(Gender.Undefined, 0)}

<b>–î–∞—Ç—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b>
    üèÅ –ü–µ—Ä–≤–∞—è: {earliestDate:dd.MM.yyyy}
    üéØ –ü–æ—Å–ª–µ–¥–Ω—è—è: {latestDate:dd.MM.yyyy}

<b>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</b> {DateTime.Now:dd.MM.yyyy HH:mm}
""".Trim();

        return statsMessage;
    }
}