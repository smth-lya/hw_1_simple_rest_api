using HW1.Api.Domain.Contracts.Services;
using HW1.Api.Domain.Contracts.Telegram;
using HW1.Api.Domain.Models;
using Telegram.Bot.Types;
using Telegram.Bot.Types.ReplyMarkups;

namespace HW1.Api.WebAPI.TelegramBot.Commands;

public class RegisterCommandHandler : BaseCommandHandler
{
    private readonly Dictionary<long, UserRegistrationData> _registrationSessions = new();

    public override string Command => "/register";
    public override string Description => "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ";

    public RegisterCommandHandler(
        ITelegramBotService botService,
        IUserService userService,
        ITelegramUserService telegramUserService)
        : base(botService, userService, telegramUserService) { }

    public override async Task HandleAsync(Message message, CancellationToken cancellationToken)
    {
        if (!await ValidateUserAccessAsync(message.From.Id, cancellationToken))
        {
            await _botService.SendMessageAsync(
                message.Chat.Id,
                "–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –±–æ—Ç–µ",
                cancellationToken);
            return;
        }

        var telegramUser = await _telegramUserService.GetUserAsync(message.From.Id);
        if (telegramUser?.SystemUserId != null)
        {
            await _botService.SendMessageAsync(
                message.Chat.Id,
                "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ!\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /profile –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è",
                cancellationToken);
            return;
        }

        // –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        _registrationSessions[message.From.Id] = new UserRegistrationData
        {
            TelegramUserId = message.From.Id,
            ChatId = message.Chat.Id,
            Step = RegistrationStep.Username
        };

        await AskForUsername(message.Chat.Id, cancellationToken);
    }

    public override async Task HandleCallbackAsync(CallbackQuery callbackQuery, CancellationToken cancellationToken)
    {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞
        if (callbackQuery.Data?.StartsWith("gender:") == true && 
            _registrationSessions.TryGetValue(callbackQuery.From.Id, out var session))
        {
            var gender = callbackQuery.Data.Split(':')[1];
            session.Gender = gender;
            session.Step = RegistrationStep.Password;

            await _botService.SendMessageAsync(
                callbackQuery.Message.Chat.Id,
                "üîí –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –ø—Ä–∏–¥—É–º–∞–π—Ç–µ –Ω–∞–¥–µ–∂–Ω—ã–π –ø–∞—Ä–æ–ª—å (–º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤):",
                cancellationToken);

            await _botService.SendMessageAsync(
                callbackQuery.Message.Chat.Id,
                "üí° <b>–°–æ–≤–µ—Ç—ã –ø–æ –ø–∞—Ä–æ–ª—é:</b>\n" +
                "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã\n" +
                "‚Ä¢ –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ—Å—Ç—ã–µ –ø–∞—Ä–æ–ª–∏\n" +
                "‚Ä¢ –ú–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤",
                cancellationToken);
        }
    }

    public async Task HandleRegistrationStepAsync(Message message, CancellationToken cancellationToken)
    {
        if (!_registrationSessions.TryGetValue(message.From.Id, out var session))
            return;

        try
        {
            switch (session.Step)
            {
                case RegistrationStep.Username:
                    await HandleUsernameStep(message, session, cancellationToken);
                    break;

                case RegistrationStep.Email:
                    await HandleEmailStep(message, session, cancellationToken);
                    break;

                case RegistrationStep.Gender:
                    await HandleGenderStep(message, session, cancellationToken);
                    break;

                case RegistrationStep.Password:
                    await HandlePasswordStep(message, session, cancellationToken);
                    break;

                case RegistrationStep.Complete:
                    await CompleteRegistration(message, session, cancellationToken);
                    break;
                default:
                    throw new ArgumentOutOfRangeException();
            }
        }
        catch (Exception ex)
        {
            await _botService.SendMessageAsync(
                message.Chat.Id,
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ /register",
                cancellationToken);
            
            _registrationSessions.Remove(message.From.Id);
        }
    }
    public Task<bool> IsUserInRegistrationAsync(long telegramUserId)
    {
        return Task.FromResult(_registrationSessions.ContainsKey(telegramUserId));
    }
    private async Task HandleUsernameStep(Message message, UserRegistrationData session, CancellationToken cancellationToken)
    {
        var username = message.Text?.Trim();
        
        if (string.IsNullOrEmpty(username) || username.Length < 3)
        {
            await _botService.SendMessageAsync(
                message.Chat.Id,
                "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                cancellationToken);
            return;
        }

        // –Ω–µ –∑–∞–Ω—è—Ç–æ –ª–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        var existingUser = await _userService.GetUserByUsernameAsync(username);
        if (existingUser != null)
        {
            await _botService.SendMessageAsync(
                message.Chat.Id,
                "–≠—Ç–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –∑–∞–Ω—è—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ:",
                cancellationToken);
            return;
        }

        session.Username = username;
        session.Step = RegistrationStep.Email;

        await _botService.SendMessageAsync(
            message.Chat.Id,
            "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email:",
            cancellationToken);
    }

    private async Task HandleEmailStep(Message message, UserRegistrationData session, CancellationToken cancellationToken)
    {
        var email = message.Text?.Trim();

        if (string.IsNullOrEmpty(email) || !IsValidEmail(email))
        {
            await _botService.SendMessageAsync(
                message.Chat.Id,
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å:",
                cancellationToken);
            return;
        }

        session.Email = email;
        session.Step = RegistrationStep.Gender;

        await AskForGender(message.Chat.Id, cancellationToken);
    }

    private async Task HandleGenderStep(Message message, UserRegistrationData session, CancellationToken cancellationToken)
    {
        await _botService.SendMessageAsync(
            message.Chat.Id,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –≤—ã—à–µ:",
            cancellationToken);
    }

    private async Task HandlePasswordStep(Message message, UserRegistrationData session, CancellationToken cancellationToken)
    {
        var password = message.Text?.Trim();

        if (string.IsNullOrEmpty(password) || password.Length < 6)
        {
            await _botService.SendMessageAsync(
                message.Chat.Id,
                "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                cancellationToken);
            return;
        }

        session.Password = password;
        session.Step = RegistrationStep.Complete;

        await ShowRegistrationSummary(message.Chat.Id, session, cancellationToken);
    }

    private async Task CompleteRegistration(Message message, UserRegistrationData session, CancellationToken cancellationToken)
    {
        if (message.Text?.ToLower() == "–¥–∞")
        {
            try
            {
                // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ
                var userDto = await _userService.CreateUserAsync(
                    session.Username!,
                    session.Password!
                );

                var telegramUser = await _telegramUserService.GetUserAsync(session.TelegramUserId);
                if (telegramUser != null)
                {

                }

                _registrationSessions.Remove(session.TelegramUserId);

                await _botService.SendMessageAsync(
                    message.Chat.Id,
                    @$"
üéâ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!</b>

‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.

<b>–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:</b>
üë§ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <code>{session.Username}</code>
üìß Email: <code>{session.Email}</code>
üë§ –ü–æ–ª: {GetGenderDisplayName(session.Gender)}
üÜî ID: <code>{userDto.Id}</code>

–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã!
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /profile –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è.
                    ".Trim(),
                    cancellationToken);
            }
            catch (Exception ex)
            {
                await _botService.SendMessageAsync(
                    message.Chat.Id,
                    "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ /register",
                    cancellationToken);
                
                _registrationSessions.Remove(session.TelegramUserId);
            }
        }
        else if (message.Text?.ToLower() == "–Ω–µ—Ç")
        {
            _registrationSessions.Remove(session.TelegramUserId);
            await _botService.SendMessageAsync(
                message.Chat.Id,
                "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register",
                cancellationToken);
        }
        else
        {
            await _botService.SendMessageAsync(
                message.Chat.Id,
                "‚ùì –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ '–î–∞' –∏–ª–∏ '–ù–µ—Ç':",
                cancellationToken);
        }
    }

    private async Task AskForUsername(long chatId, CancellationToken cancellationToken)
    {
        await _botService.SendMessageAsync(
            chatId,
            @"
üë§ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ</b>

–î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –≤–∞—à—É —É—á–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å!

üìù <b>–®–∞–≥ 1 –∏–∑ 4: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>

–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ—Ç 3 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤):
‚Ä¢ –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ —Å–∏–º–≤–æ–ª _
‚Ä¢ –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º

üí° <i>–ü—Ä–∏–º–µ—Ä: ivan_petrov, anna2024, user_123</i>
            ".Trim(),
            cancellationToken);
    }

    private async Task AskForGender(long chatId, CancellationToken cancellationToken)
    {
        var keyboard = new InlineKeyboardMarkup(new[]
        {
            new[]
            {
                InlineKeyboardButton.WithCallbackData("–ú—É–∂—Å–∫–æ–π", "gender:M"),
                InlineKeyboardButton.WithCallbackData("–ñ–µ–Ω—Å–∫–∏–π", "gender:F")
            },
            new[]
            {
                InlineKeyboardButton.WithCallbackData("–ù–µ —É–∫–∞–∑—ã–≤–∞—Ç—å", "gender:U")
            }
        });

        await _botService.SendMessageAsync(
            chatId,
            @"
üë§ <b>–®–∞–≥ 3 –∏–∑ 4: –ü–æ–ª</b>

–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):
            ".Trim(),
            cancellationToken);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        await _botService.SendMessageAsync(
            chatId,
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª:",
            cancellationToken);
    }

    private async Task ShowRegistrationSummary(long chatId, UserRegistrationData session, CancellationToken cancellationToken)
    {
        var summary = @$"
üìã <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:</b>

üë§ <b>–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> <code>{session.Username}</code>
üìß <b>Email:</b> <code>{session.Email}</code>
üë§ <b>–ü–æ–ª:</b> {GetGenderDisplayName(session.Gender)}

<b>–í—Å—ë –≤–µ—Ä–Ω–æ?</b>
–û—Ç–≤–µ—Ç—å—Ç–µ '–î–∞' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–ª–∏ '–ù–µ—Ç' –¥–ª—è –æ—Ç–º–µ–Ω—ã.
        ".Trim();

        await _botService.SendMessageAsync(chatId, summary, cancellationToken);
    }

    private static bool IsValidEmail(string email)
    {
        try
        {
            var addr = new System.Net.Mail.MailAddress(email);
            return addr.Address == email;
        }
        catch
        {
            return false;
        }
    }

    private static string GetGenderDisplayName(string? gender) => gender?.ToUpper() switch
    {
        "M" => "–ú—É–∂—Å–∫–æ–π",
        "F" => "–ñ–µ–Ω—Å–∫–∏–π",
        _ => "–ù–µ —É–∫–∞–∑–∞–Ω"
    };
}

public class UserRegistrationData
{
    public long TelegramUserId { get; set; }
    public long ChatId { get; set; }
    public string? Username { get; set; }
    public string? Email { get; set; }
    public string? Gender { get; set; }
    public string? Password { get; set; }
    public RegistrationStep Step { get; set; }
}

public enum RegistrationStep
{
    Username,
    Email,
    Gender,
    Password,
    Complete
}