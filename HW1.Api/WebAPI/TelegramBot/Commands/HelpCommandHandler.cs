using HW1.Api.Domain.Contracts.Services;
using HW1.Api.Domain.Contracts.Telegram;
using Telegram.Bot.Types;

namespace HW1.Api.WebAPI.TelegramBot.Commands;

public class HelpCommandHandler : BaseCommandHandler
{
    private readonly Func<IEnumerable<ICommandHandler>> _commandHandlersFactory;

    public override string Command => "/help";
    public override string Description => "–ü–æ–º–æ—â—å –∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥";

    public HelpCommandHandler(
        ITelegramBotService botService,
        IUserService userService,
        ITelegramUserService telegramUserService,
        Func<IEnumerable<ICommandHandler>> commandHandlersFactory) 
        : base(botService, userService, telegramUserService)
    {
        _commandHandlersFactory = commandHandlersFactory;
    }

    public override async Task HandleAsync(Message message, CancellationToken cancellationToken)
    {
        var commandText = message.Text?.Split(' ').LastOrDefault()?.ToLower();

        if (!string.IsNullOrEmpty(commandText) && commandText != "/help")
        {
            await ShowCommandHelpAsync(message.Chat.Id, commandText, cancellationToken);
        }
        else
        {
            await ShowGeneralHelpAsync(message.Chat.Id, cancellationToken);
        }
    }

    private async Task ShowGeneralHelpAsync(long chatId, CancellationToken cancellationToken)
    {
        var helpMessage = "üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n";
        
        foreach (var handler in _commandHandlersFactory().OrderBy(h => h.Command)!)
        {
            helpMessage += $"<code>{handler.Command}</code> - {handler.Description}\n";
        }

        helpMessage += "\nüí° <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help [–∫–æ–º–∞–Ω–¥–∞] –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏</i>";

        await _botService.SendMessageAsync(chatId, helpMessage, cancellationToken);
    }

    private async Task ShowCommandHelpAsync(long chatId, string command, CancellationToken cancellationToken)
    {
        var handler = _commandHandlersFactory().FirstOrDefault(h => 
            h.Command.Equals(command, StringComparison.OrdinalIgnoreCase));

        if (handler == null)
        {
            await _botService.SendMessageAsync(
                chatId,
                $"–ö–æ–º–∞–Ω–¥–∞ <code>{command}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.",
                cancellationToken);
            return;
        }

        var commandHelp = GetCommandSpecificHelp(handler.Command);
        await _botService.SendMessageAsync(chatId, commandHelp, cancellationToken);
    }

    private static string GetCommandSpecificHelp(string command) => command.ToLower() switch
    {
        "/start" => @"
<b>–ö–æ–º–∞–Ω–¥–∞ /start</b>

–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ.

<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>
<code>/start</code>

–ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞.
        ",
        "/stats" => @"
<b>–ö–æ–º–∞–Ω–¥–∞ /stats</b>

–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã:
- –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
- –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—É
- –î–∞—Ç—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏

<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>
<code>/stats</code>
        ",
        "/users" => @"
<b>–ö–æ–º–∞–Ω–¥–∞ /users</b>

–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–∏—Å—Ç–µ–º—ã —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.

<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>
<code>/users</code> - –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
<code>/users 2</code> - –≤—Ç–æ—Ä–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
",
        _ => $"–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–µ {command}\n\n–û–ø–∏—Å–∞–Ω–∏–µ: {GetHandlerDescription(command)}"
    };

    private static string GetHandlerDescription(string command) => command.ToLower() switch
    {
        "/start" => "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        "/help" => "–ü–æ–º–æ—â—å –∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥",
        "/stats" => "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã",
        "/users" => "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
        "/profile" => "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å",
        "/register" => "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ",
        _ => "–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã"
    };
}