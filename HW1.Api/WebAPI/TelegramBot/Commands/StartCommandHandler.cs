using HW1.Api.Domain.Contracts.Services;
using HW1.Api.Domain.Contracts.Telegram;
using Telegram.Bot.Types;
using Telegram.Bot.Types.ReplyMarkups;

namespace HW1.Api.WebAPI.TelegramBot.Commands;

public class StartCommandHandler : BaseCommandHandler
{
    public override string Command => "/start";
    public override string Description => "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è";

    public StartCommandHandler(
        ITelegramBotService botService,
        IUserService userService,
        ITelegramUserService telegramUserService)
        : base(botService, userService, telegramUserService) { }

    public override async Task HandleAsync(Message message, CancellationToken cancellationToken)
    {
        var telegramUser = await _telegramUserService.RegisterUserAsync(
            message.From.Id,
            message.Chat.Id,
            message.From.Username ?? string.Empty,
            message.From.FirstName,
            message.From.LastName ?? string.Empty
        );

        var welcomeMessage = @$"
üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.From.FirstName}!

–Ø - –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ —Å–∏—Å—Ç–µ–º—ã.

üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
/help - –ü–æ–º–æ—â—å –∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
/profile - –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å
/users - –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
/register - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help [–∫–æ–º–∞–Ω–¥–∞]
".Trim();

        var keyboard = new ReplyKeyboardMarkup(new[]
        {
            new[] { new KeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), new KeyboardButton("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏") },
            new[] { new KeyboardButton("–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"), new KeyboardButton("‚Ñπ–ü–æ–º–æ—â—å") }
        })
        {
            ResizeKeyboard = true
        };

        await _botService.SendMessageAsync(
            message.Chat.Id,
            welcomeMessage,
            cancellationToken);
    }
}