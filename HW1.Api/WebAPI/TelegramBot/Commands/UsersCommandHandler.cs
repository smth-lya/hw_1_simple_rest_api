using HW1.Api.Application.DTOs;
using HW1.Api.Domain.Contracts.Services;
using HW1.Api.Domain.Contracts.Telegram;
using HW1.Api.WebAPI.Models;
using Telegram.Bot.Types;
using Telegram.Bot.Types.ReplyMarkups;

namespace HW1.Api.WebAPI.TelegramBot.Commands;

public class UsersCommandHandler : BaseCommandHandler
{
    public override string Command => "/users";
    public override string Description => "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π";

    public UsersCommandHandler(
        ITelegramBotService botService,
        IUserService userService,
        ITelegramUserService telegramUserService)
        : base(botService, userService, telegramUserService) { }

    public override async Task HandleAsync(Message message, CancellationToken cancellationToken)
    {
        if (!await ValidateUserAccessAsync(message.From.Id, cancellationToken))
        {
            await _botService.SendMessageAsync(
                message.Chat.Id,
                "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /start",
                cancellationToken);
            return;
        }

        var pageNumber = 1;
        var parts = message.Text?.Split(' ');
        if (parts?.Length > 1 && int.TryParse(parts[1], out var page))
        {
            pageNumber = Math.Max(1, page);
        }

        try
        {
            var pagination = new PaginationRequest { PageNumber = pageNumber, PageSize = 5 };
            var usersPage = await _userService.GetUsersPagedAsync(pagination);

            if (!usersPage.Items.Any())
            {
                await _botService.SendMessageAsync(
                    message.Chat.Id,
                    "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                    cancellationToken);
                return;
            }

            var usersList = FormatUsersList(usersPage.Items);
            var navigation = FormatNavigation(usersPage, pageNumber);

            var messageText = $@"
üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–∏—Å—Ç–µ–º—ã</b>

{usersList}

{navigation}
            ".Trim();

            var keyboard = CreateNavigationKeyboard(usersPage, pageNumber);

            await _botService.SendMessageAsync(
                message.Chat.Id,
                messageText,
                cancellationToken);
        }
        catch (Exception ex)
        {
            await _botService.SendMessageAsync(
                message.Chat.Id,
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
                cancellationToken);
        }
    }

    private static string FormatUsersList(IEnumerable<UserDto> users)
    {
        return string.Join("\n\n", users.Select((user, index) => $@"
{(index + 1)}. <b>{user.Username}</b>
   üìß {user.Email}
   üë§ {GetGenderEmoji(user.Gender)}
   üìÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {user.CreatedDate:dd.MM.yyyy}
   üîß –†–æ–ª–∏: {string.Join(", ", user.Roles)}".Trim()));
    }

    private static string FormatNavigation(PagedResult<UserDto> page, int currentPage)
    {
        return $@"
üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {currentPage} –∏–∑ {page.TotalPages}
üë§ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {page.TotalCount}
        ".Trim();
    }

    private static InlineKeyboardMarkup? CreateNavigationKeyboard(PagedResult<UserDto> page, int currentPage)
    {
        var buttons = new List<InlineKeyboardButton>();

        if (page.HasPreviousPage)
        {
            buttons.Add(InlineKeyboardButton.WithCallbackData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", $"/users {currentPage - 1}"));
        }

        if (page.HasNextPage)
        {
            buttons.Add(InlineKeyboardButton.WithCallbackData("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", $"/users {currentPage + 1}"));
        }

        return buttons.Any() ? new InlineKeyboardMarkup(buttons) : null;
    }

    private static string GetGenderEmoji(string? gender) => gender?.ToUpper() switch
    {
        "M" => "üë®",
        "F" => "üë©",
        _ => "‚ùì"
    };
}