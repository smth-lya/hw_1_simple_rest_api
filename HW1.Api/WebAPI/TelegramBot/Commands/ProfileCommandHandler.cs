using System.Text;
using HW1.Api.Domain.Contracts.Services;
using HW1.Api.Domain.Contracts.Telegram;
using HW1.Api.Domain.Models;
using Telegram.Bot.Types;
using Telegram.Bot.Types.ReplyMarkups;
using User = Telegram.Bot.Types.User;

namespace HW1.Api.WebAPI.TelegramBot.Commands;

public class ProfileCommandHandler : BaseCommandHandler
{
    public override string Command => "/profile";
    public override string Description => "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å";

    public ProfileCommandHandler(
        ITelegramBotService botService,
        IUserService userService,
        ITelegramUserService telegramUserService)
        : base(botService, userService, telegramUserService) { }

    public override async Task HandleAsync(Message message, CancellationToken cancellationToken)
    {
        if (!await ValidateUserAccessAsync(message.From.Id, cancellationToken))
        {
            await _botService.SendMessageAsync(
                message.Chat.Id,
                "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –±–æ—Ç–µ",
                cancellationToken);
            return;
        }

        var telegramUser = await _telegramUserService.GetUserAsync(message.From.Id);
        if (telegramUser == null)
        {
            await _botService.SendMessageAsync(
                message.Chat.Id,
                "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í—ã–ø–æ–ª–Ω–∏—Ç–µ /start",
                cancellationToken);
            return;
        }

        try
        {
            var profileMessage = await BuildProfileMessageAsync(telegramUser, message.From);
            var keyboard = CreateProfileKeyboard(telegramUser);

            await _botService.SendMessageAsync(
                message.Chat.Id,
                profileMessage,
                cancellationToken);
        }
        catch (Exception ex)
        {
            await _botService.SendMessageAsync(
                message.Chat.Id,
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è",
                cancellationToken);
        }
    }

    private async Task<string> BuildProfileMessageAsync(TelegramUser telegramUser, User telegramFrom)
    {
        var profile = new StringBuilder();

        profile.AppendLine("üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>");
        profile.AppendLine();

        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ Telegram
        profile.AppendLine("üì± <b>Telegram –¥–∞–Ω–Ω—ã–µ:</b>");
        profile.AppendLine($"   üÜî ID: <code>{telegramUser.TelegramUserId}</code>");
        profile.AppendLine($"   üë§ –ò–º—è: {telegramFrom.FirstName} {telegramFrom.LastName}".Trim());
        
        if (!string.IsNullOrEmpty(telegramUser.Username))
            profile.AppendLine($"   üìù Username: @{telegramUser.Username}");
        
        profile.AppendLine($"   üìÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {telegramUser.RegisteredAt:dd.MM.yyyy HH:mm}");
        profile.AppendLine($"   ‚è∞ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {telegramUser.LastActivity:dd.MM.yyyy HH:mm}");
        profile.AppendLine();

        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ —Å–∏—Å—Ç–µ–º—ã
        if (telegramUser.SystemUserId.HasValue)
        {
            var systemUser = await _userService.GetUserByIdAsync(telegramUser.SystemUserId.Value);
            if (systemUser != null)
            {
                profile.AppendLine("üåê <b>–î–∞–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã:</b>");
                profile.AppendLine($"   üÜî System ID: <code>{systemUser.Id}</code>");
                profile.AppendLine($"   üë§ Username: <code>{systemUser.Username}</code>");
                profile.AppendLine($"   üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {systemUser.CreatedAt:dd.MM.yyyy}");
                profile.AppendLine($"   üîÑ –û–±–Ω–æ–≤–ª–µ–Ω: {systemUser.UpdatedAt:dd.MM.yyyy}");
                
                // if (systemUser.Roles.Any())
                //     profile.AppendLine($"   üéØ –†–æ–ª–∏: {string.Join(", ", systemUser.Roles)}");
            }
        }
        else
        {
            profile.AppendLine("‚ùå <b>–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å:</b> –ù–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω");
            profile.AppendLine("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏ –≤ —Å–∏—Å—Ç–µ–º–µ");
        }

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        profile.AppendLine();
        profile.AppendLine("üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>");
        
        var totalUsers = await _userService.GetTotalUsersCountAsync();
        var activeTelegramUsers = await _telegramUserService.GetActiveUsersCountAsync();
        
        profile.AppendLine($"   üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ: {totalUsers}");
        profile.AppendLine($"   ü§ñ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞: {activeTelegramUsers}");

        return profile.ToString();
    }

    private static InlineKeyboardMarkup CreateProfileKeyboard(TelegramUser telegramUser)
    {
        var buttons = new List<InlineKeyboardButton[]>();

        if (!telegramUser.SystemUserId.HasValue)
        {
            buttons.Add([
                InlineKeyboardButton.WithCallbackData("üöÄ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ", "register_from_profile")
            ]);
        }
        else
        {
            buttons.Add([
                InlineKeyboardButton.WithCallbackData("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", "refresh_profile"),
                InlineKeyboardButton.WithCallbackData("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", "edit_profile")
            ]);
        }

        buttons.Add([
            InlineKeyboardButton.WithCallbackData("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "show_stats"),
            InlineKeyboardButton.WithCallbackData("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", "show_users")
        ]);

        return new InlineKeyboardMarkup(buttons);
    }

    public override async Task HandleCallbackAsync(CallbackQuery callbackQuery, CancellationToken cancellationToken)
    {
        switch (callbackQuery.Data)
        {
            case "refresh_profile":
                await HandleRefreshProfile(callbackQuery, cancellationToken);
                break;
                
            case "register_from_profile":
                await HandleRegisterFromProfile(callbackQuery, cancellationToken);
                break;
                
            case "edit_profile":
                await HandleEditProfile(callbackQuery, cancellationToken);
                break;
                
            case "show_stats":
                await HandleShowStats(callbackQuery, cancellationToken);
                break;
                
            case "show_users":
                await HandleShowUsers(callbackQuery, cancellationToken);
                break;
        }
    }

    private async Task HandleRefreshProfile(CallbackQuery callbackQuery, CancellationToken cancellationToken)
    {
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        await _telegramUserService.UpdateUserActivityAsync(callbackQuery.From.Id);

        // –ü–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
        var telegramUser = await _telegramUserService.GetUserAsync(callbackQuery.From.Id);
        if (telegramUser != null)
        {
            var profileMessage = await BuildProfileMessageAsync(telegramUser, callbackQuery.From);
            var keyboard = CreateProfileKeyboard(telegramUser);

            await _botService.SendMessageAsync(
                callbackQuery.Message.Chat.Id,
                "‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω!\n\n" + profileMessage,
                cancellationToken);
        }
    }

    private async Task HandleRegisterFromProfile(CallbackQuery callbackQuery, CancellationToken cancellationToken)
    {
        await _botService.SendMessageAsync(
            callbackQuery.Message.Chat.Id,
            "üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ —Å–∏—Å—Ç–µ–º–µ...",
            cancellationToken);

        // –ò–º–∏—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∫–æ–º–∞–Ω–¥—ã register
        var message = new Message
        {
            From = callbackQuery.From,
            Chat = callbackQuery.Message.Chat,
            Text = "/register"
        };

        await HandleAsync(message, cancellationToken);
    }

    private async Task HandleEditProfile(CallbackQuery callbackQuery, CancellationToken cancellationToken)
    {
        await _botService.SendMessageAsync(
            callbackQuery.Message.Chat.Id,
            "‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è</b>\n\n" +
            "–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å.\n\n" +
            "üåê <a href=\"http://localhost:8080/swagger\">–ü–µ—Ä–µ–π—Ç–∏ –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å</a>",
            cancellationToken);
    }

    private async Task HandleShowStats(CallbackQuery callbackQuery, CancellationToken cancellationToken)
    {
        await _botService.SendMessageAsync(
            callbackQuery.Message.Chat.Id,
            "üìä –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...",
            cancellationToken);

        // –ò–º–∏—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∫–æ–º–∞–Ω–¥—ã stats
        var message = new Message
        {
            From = callbackQuery.From,
            Chat = callbackQuery.Message.Chat,
            Text = "/stats"
        };

        await HandleAsync(message, cancellationToken);
    }

    private async Task HandleShowUsers(CallbackQuery callbackQuery, CancellationToken cancellationToken)
    {
        await _botService.SendMessageAsync(
            callbackQuery.Message.Chat.Id,
            "üë• –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...",
            cancellationToken);

        // –ò–º–∏—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∫–æ–º–∞–Ω–¥—ã users
        var message = new Message
        {
            From = callbackQuery.From,
            Chat = callbackQuery.Message.Chat,
            Text = "/users"
        };

        await HandleAsync(message, cancellationToken);
    }

    private static string GetGenderDisplay(Gender gender) => gender switch
    {
        Gender.Male => "–ú—É–∂—Å–∫–æ–π",
        Gender.Female => "–ñ–µ–Ω—Å–∫–∏–π",
        _ => "–ù–µ —É–∫–∞–∑–∞–Ω"
    };
}